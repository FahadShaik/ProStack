Hoisting in JS?

==>The functionality whre the variables or functions can be executed before initialization this is a special feature given to us by JS


First class functions.
--> First class functions are passed as values inside the params basically considered as values.
basically known as a feature of a programming language where it is possible to pass another function as value or not.


Higher order function? is a function that recieves another function as a argument or returns one more function.
Example, Map, filter, eventlisteners, setTimeout , setInterval

call(), apply(), bind().

this methods are inbuilt methods which every JS function gets
-> this works well with the objects where if an object has a method which performs operations and we have one more object where we need to perform the same logic we can call that method in the new object.  

const myObjOne = {
  productName: "Iphone",
  productModel: " Pro maX",
  concatFn: function () {
    console.log(this.productName + this.productModel);
  },
};

myObjOne.concatFn(); // gives concat string

const myObjTwo = {
  productName: "Samasung",
  productModel: " S23 Ultra",
};

myObjOne.concatFn.call(myObjTwo); //performs same


What is Web API?
->Web API's is the special features created into the browsers for the more powerful useage of JS. Basically we can come to know that document.getELementById is also a web api feature , Console.log is also a webApi feature, setTimeout is also web Api feature. fetch() is too etc

Callbacks in JS?
-> Callbacks are the first class citizens means that they can be passed as arguments to the function which gives an scope of exposure for the function to find its way into the world of JS.
Please refer callbacks.js for code example.

Event Loops in JS?
This is mainly connected to a callbacks.
-> lets write some code and fix this into my mind permanently

console.log("a");

setTimeout(function cb(){
  console.log("callback executed")
}, 10000);

console.log("b")

a) When line one is run the webapi is and in a global exec context is created.
a is run immediately

b) now setTimeout is called and the timer api is attached and later 10000 ms is given the time

c) Now the third line is also executed in GEC

When all the call stack is empty the callback inside the setTimeout needs to be pushed on the call stack this is when the callstack queue comes into picture, 

as soon as the timer expires the function is now tunneled on the callstack queue and later the event loop stays there and checks(monitors) wether the callstack is empty as it sees that the callstack is empty the callback is been immediately pushed on the GEC and then it is executed by the callstack's GEC for that callback.

But one more task queue is there where only the promises are been scheduled first and the functions are pushed inside it. so the event loop initially monitors the microtask queue and later the callstack queue.Hence the callbacks from the promises is given more priority.
