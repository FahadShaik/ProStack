1. Here promise is basically the placeholder or a object representation to the data which is coming asynchronously 
2. The promise internally takes a callback function resolve and reject
3. If the data is returned flawlessly the promise sets a result as fulfilled or it is still consuming from a async operation it keeps pending and if data is faulty it  says rejected 
4. If data is pass or fulfilled, resolve function can be called and if the data fails the reject method is called explicitly
5. For that promise object We can call the method .then() which has the functionality to do further after the promise is fullfilled and we can put out callback there which assures that it only calls once
6. If the promise is fulfilled if the promise is rejected the catch method is called if a callback is given in case of failure.

-> const myPromise = new Promise((resolve, reject) => {});

-> myPromise.then(callback which executes implicitly and only once if promise is fulfilled).catch(custom callback if the promise is rejected).

Important point to note is all the fetch() or axios is returning a promise internally.